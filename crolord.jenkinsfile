#!groovy

@Library('CROLordSharedLibraryCode')  _
import org.devops.BuildUtils

pipeline {
    // 定义使用的 Jenkins agent 类型
    agent any
    
    // 定义环境变量
    environment {
        GIT_BRANCH = 'main' // Git主分支的默认值
        MAJOR_VERSION = 'v1' // 主版本号
        MINOR_VERSION = '0'  // 次版本号
        //PLATFORMS = 'linux/amd64,linux/arm64' // 构建目标平台
        MAJOR = "${params.MAJOR_VERSION ?: env.MAJOR_VERSION ?: '1'}" // 主版本号，允许通过参数覆盖
        MINOR = "${params.MINOR_VERSION ?: env.MINOR_VERSION ?: '0'}" // 次版本号，允许通过参数覆盖
        PATCH = "${env.BUILD_NUMBER}" // 构建号，用作修订版本号
        VERSION_TAG = "${MAJOR}.${MINOR}.${PATCH}" // 组合版本标签
        IMAGE_REGISTRY = "${params.IMAGE_REGISTRY}" // 镜像仓库地址
        IMAGE_NAMESPACE = "${params.IMAGE_NAMESPACE}" // 镜像命名空间
        REPOSITORY_NAME = "${params.REPOSITORY_NAME}"     // 镜像仓库名
        IMAGE_ID = "${params.IMAGE_NAMESPACE}" // 镜像ID
        SONARQUBE_DOMAIN = "${params.SONARQUBE_DOMAINE}" // Sonarqube 域名配置
        PLATFORMS = "${params.PLATFORMS}" //PLATFORMS使用用户选择的平台参数
    }

    // 触发条件
    triggers { githubPush() }

    // 参数定义
    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Initial default branch: main')
        choice(name: 'PLATFORMS', choices: ['linux/amd64', 'linux/arm64','linux/amd64,linux/arm64'], description: 'Target platforms, initial value: linux/amd64')
        string(name: 'GIT_REPOSITORY', defaultValue: 'https://github.com/Roliyal/CROlordCodelibrary.git', description: 'Git repository URL, default: https://github.com/Roliyal/CROlordCodelibrary.git')
        string(name: 'MAJOR_VERSION', defaultValue: '1', description: 'Major version number, default: 1')
        string(name: 'MINOR_VERSION', defaultValue: '0', description: 'Minor version number, default: 0')
        string(name: 'BUILD_DIRECTORY', defaultValue: 'Chapter2KubernetesApplicationBuild/Unit2CodeLibrary/FEBEseparation/go-guess-number', description: 'Build directory path, default path: Chapter2KubernetesApplicationBuild/Unit2CodeLibrary/FEBEseparation/go-guess-number')
        string(name: 'IMAGE_REGISTRY', defaultValue: 'lxf-registry-vpc.cn-hongkong.cr.aliyuncs.com', description: 'Image registry address, default: crolord-registry-registry-vpc.cn-hongkong.cr.aliyuncs.com')
        string(name: 'IMAGE_NAMESPACE', defaultValue: 'febe', description: 'Image namespace, default: febe')
        string(name: 'REPOSITORY_NAME', defaultValue: 'crolord', description: 'Repository name, default: crolord')
        string(name: 'SONARQUBE_DOMAINE', defaultValue: 'sonarqube.roliyal.com', description: 'SonarQube domain, default: sonarqube.roliyal.com')
    }

    
        // 构建流程定义
        stages {
            // 设置版本信息
            stage('Version') {
                steps {
                    script {
                        env.PATCH_VERSION = env.BUILD_NUMBER
                        env.VERSION_NUMBER = "${env.MAJOR}.${env.MINOR}.${env.PATCH_VERSION}"
                        echo "Current Version: ${env.VERSION_NUMBER}"
                    }
                }
            }
            
        // 检出代码
        stage('Checkout') {
            steps {
                cleanWs() // 清理工作空间
                script {
                    env.GIT_BRANCH = params.BRANCH
                }
                // 检出Git仓库
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: "*/${env.GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: params.GIT_REPOSITORY]],
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]]
                ]
                echo '代码检出完成'
            }
        }
        
        // 检查目录和Dockerfile
        stage('Check Directory') {
            steps {
                echo "Current working directory: ${pwd()}"
                sh 'ls -la'
                stash includes: '**', name: 'source-code' // 存储工作空间，包括Dockerfile和应用代码
            }
        }

        stage('Parallel Build') {
            when {
                expression {
                    env.PLATFORMS == 'linux/amd64' || env.PLATFORMS == 'linux/arm64' || env.PLATFORMS == 'linux/amd64,linux/arm64'
                }
            }
            parallel {
                stage('Build for amd64') {
                    when {
                        expression {
                            env.PLATFORMS == 'linux/amd64' || env.PLATFORMS == 'linux/amd64,linux/arm64'
                        }
                    }
                    agent { kubernetes { inheritFrom 'kanikoamd' } }
                    steps {
                        script {
                            echo "WORKSPACE is: ${env.WORKSPACE}"
                            unstash 'source-code'
                            container('kanikoamd') {
                                def utils = new org.devops.BuildUtils()
                                // 获取当前脚本 (this指当前的流水线脚本实例)
                                def currentScript = this
                                // 创建环境变量的映射
                                def envVars = [:]
                                this.env.getEnvironment().each { key, value ->
                                    envVars[key] = value
                                }
                                // 调用BuildUtils中的方法
                                utils.buildAmd64(currentScript, params, envVars)
                            }
                        }
                    }
                }

                stage('Build for arm64') {
                    when {
                        expression {
                            env.PLATFORMS == 'linux/arm64' || env.PLATFORMS == 'linux/amd64,linux/arm64'
                        }
                    }
                    agent { kubernetes { inheritFrom 'kanikoarm' } }
                    steps {
                        script {
                            unstash 'source-code'
                            container('kanikoarm') {
                                def utils = new org.devops.BuildUtils()
                                // 获取当前脚本 (this指当前的流水线脚本实例)
                                def currentScript = this
                                // 创建环境变量的映射
                                def envVars = [:]
                                this.env.getEnvironment().each { key, value ->
                                    envVars[key] = value
                                }
                                // 调用BuildUtils中的方法
                                utils.buildArm64(currentScript, params, envVars)
                            
                            }
                        }
                    }
                }
            }
        }

 
      
            



            
            // 推送多架构镜像 Manifest-tools
            stage('Push Multi-Arch Manifest') {
                agent { kubernetes { inheritFrom 'kanikoamd' } }
                steps {
                    container('kanikoamd') {
                        script {
                            sh "manifest-tool --version "
                            // 创建并推送多架构镜像的manifest
                            sh """
                                manifest-tool --insecure push from-args \\
                                --platforms '${env.PLATFORMS}' \\
                                --template '${env.IMAGE_REGISTRY}/${env.IMAGE_NAMESPACE}/${env.REPOSITORY_NAME}:${env.VERSION_TAG}-ARCHVARIANT' \\
                                --target '${env.IMAGE_REGISTRY}/${env.IMAGE_NAMESPACE}/${env.REPOSITORY_NAME}:${env.VERSION_TAG}'
                            """
                            sh "trivy image --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed --no-progress --insecure --timeout 5m '${env.IMAGE_REGISTRY}/${env.IMAGE_NAMESPACE}/${env.REPOSITORY_NAME}:${env.VERSION_TAG}'"
                        }
                    }
                }
            }
            // 部署到 Kubernetes 集群
            /*stage('Deploy to Kubernetes') {
                agent { kubernetes { inheritFrom 'kanikoamd' } } 
                steps {
                    unstash 'source-code' // 恢复之前存储的代码
                    container('kanikoamd') {
                        script {
                            withCredentials([file(credentialsId: 'crolorduat', variable: 'KUBECONFIG')]) {
                                // 执行 kubectl 命令
                                sh "kaniko version" 
                                sh "kubectl get node"
                                env.FULL_IMAGE_URL = "${env.IMAGE_REGISTRY}/${env.IMAGE_NAMESPACE}/${env.REPOSITORY_NAME}:${env.VERSION_TAG}"
                                
                                sh """
                                cd ${env.WORKSPACE}/${params.BUILD_DIRECTORY}
                                cp *.yaml updated-deployment.yaml
                                sed -i 's|image:.*|image: ${env.FULL_IMAGE_URL}|' updated-deployment.yaml
                                kubectl apply -f updated-deployment.yaml
                                """
                            }
                        }
                    }
                }
        }*/
    
    }
}
